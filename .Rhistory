library(dplyr)
library(MLmetrics)
library(quantmod)
library(e1071)
library(randomForest)
library(MASS)
library(rpart) # for recursive partitioning model
library(rpart.plot) # for plotting recursive partitioning models
library(adabag) # for bagged models
library(caret) # for confusionMatrix
library(C50) # for the C5.0 model
library(RColorBrewer) # for colour palettes
library(ROCR) # for the ROC curve
library(rattle)
library(Hmisc)
library(glmnet)
library(ggplot2)
library(tree)
library(MASS)
library(nFactors)
#Below I am setting my working directory
setwd("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1")
#Here I'm importing my prices dataset in RStudio
MonthlyPrice <- read.csv("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/MonthlyHousePrice.csv")
london <- read.csv("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/London.csv")
dublinPrices <- read.csv("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/DublinHouses.csv")
View(MonthlyPrice)#see our data in new tab
View(london)
View(dublinPrices)
print(MonthlyPrice)#printing our data in console
#Find our what value do we have at our index
MonthlyPrice[,1]#checking our index one
MonthlyPrice[,2]#checking our index two
MonthlyPrice[,3]#checking our index three
MonthlyPrice[,4]#checking our index four
MonthlyPrice[,5]#checking our index five
MonthlyPrice[,6]#checking our index six
MonthlyPrice[,7]#checking our index seven
#Checking index of our London houses data
london[,1]#checking our index one
london[,2]#checking our index two
london[,3]#checking our index three
london[,4]#checking our index four
london[,5]#checking our index five
london[,6]#checking our index six
london[,7]#checking our index seven
london[,8]#checking our index eight
london[,9]#checking our index nine
london[,10]#checking our index ten
#Checking index of our Dublin houses data
dublinPrices[,1]#checking our index one
dublinPrices[,2]#checking our index two
dublinPrices[,3]#checking our index three
dublinPrices[,4]#checking our index four
dublinPrices[,5]#checking our index five
dublinPrices[,6]#checking our index six
dublinPrices[,7]#checking our index seven
dublinPrices[,8]#checking our index eight
dublinPrices[,9]#checking our index nine
dublinPrices[,10]#checking our index ten
#Reordering dataset by their position
MonthlyPrice<-MonthlyPrice[, c(1,2,5,4,6,3,7)] #here I just reorderes my columns
View(MonthlyPrice)
#Deleting unnecessary column from London housing data
london[,1] <- NULL
london[,7] <- NULL
#Deleting unnecessary column from Dublin housing data
dublinPrices$Address <- NULL
dublinPrices$Postal.Code <- NULL
dublinPrices$Description.of.Property <- NULL
#Changing names of columns for our london house prices datasets
names(MonthlyPrice)[names(MonthlyPrice)== "date"] <- "Date"
names(MonthlyPrice)[names(MonthlyPrice)== "area"] <- "Specific area of London"
names(MonthlyPrice)[names(MonthlyPrice)== "houses_sold"] <- "HousesSold"
names(MonthlyPrice)[names(MonthlyPrice)== "code"] <- "Code"
names(MonthlyPrice)[names(MonthlyPrice)== "no_of_crimes"] <- "NumberOfCrimes"
names(MonthlyPrice)[names(MonthlyPrice)== "average_price"] <- "AveragePrices"
names(MonthlyPrice)[names(MonthlyPrice)== "borough_flag"] <- "BoroughFlag"
MonthlyPrice$HouseSold <- NULL
View(MonthlyPrice)#Take a look at our new datasets where names of our columns has been changed!
MonthlyPrice_Mean<-mean(MonthlyPrice$HousesSold, na.rm = TRUE)
MonthlyPrice$HousesSold[is.na(MonthlyPrice$HousesSold)]<-MonthlyPrice_Mean#Filling empty rows with mean of column
crimes_Mean<-mean(MonthlyPrice$NumberOfCrimes, na.rm = TRUE)
MonthlyPrice$NumberOfCrimes[is.na(MonthlyPrice$NumberOfCrimes)]<-crimes_Mean#Filling empty rows with mean of column
sapply(MonthlyPrice, function(x) sum(is.na(x)))#Check is there any more empty column
#checking null values of London Dataset
sapply(london, function(x) sum(is.na(x)))#Check is there any more empty column
#Checking null values in Dublin house price datasets
sapply(dublinPrices, function(x) sum(is.na(x)))#Check is there any more empty column
#Converting Dublin houses prices from characters to numeric
numeric <- suppressWarnings(as.numeric(dublinPrices$Price))
numeric
summary(numeric)
#creating a new data frame of dublin house price with their number of bedrooms, number of house bathroom, and their prices.
houseBeds <- c(dublinPrices$Number.of.bedrooms)
View(houseBeds)
housePrice <- c(numeric)
View(housePrice)
houseBath <- c(dublinPrices$Number.of.bathrooms)
View(houseBath)
dublinDf <- data.frame(houseBeds, housePrice, houseBath)
View(dublinDf)
write_csv(dublinDf,"C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/dublinDf.csv")
#Exploratory Data Analysis
summary(MonthlyPrice)#Summary of our data (descriptive statistics)
summary(london)#Summary of our London data (descriptive statistics)
summary(dublinPrices)
str(dublinPrices)
# Create the function for checking mode.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
v <- c(MonthlyPrice$AveragePrices)
w <- c(MonthlyPrice$NumberOfCrimes)
h <- c(MonthlyPrice$HousesSold)
area <- c(MonthlyPrice$`Specific area of London`)
# Calculate the mode using the above function.
result <- getmode(v)#Mode for average prices
crimes <- getmode(w)#Mode for number of crimes
houseSolds <- getmode(h)#Mode for house sold
specificArea <- getmode(area)
print(result)#71070 is mode of average prices
print(crimes)#mode of numbers of crimes is 2158.358
print(houseSolds)#Mode of house sold is 3893.994
print(specificArea)#mode of specific area in London is (Enfield)
#BarPlot between highest and lowest prices of London houses
londonMaxPrice <- max(MonthlyPrice$AveragePrices)#1463378
londonMinPrice <- min(MonthlyPrice$AveragePrices)#40722
prices <- c(40722, 1463378)
comparison <- c("Minimum", "Maximum")
barplot(prices,names.arg=comparison,xlab="",ylab="House prices",col="light blue",
main="Highest vs Lowest prices of London houses",border="red")
dates <- c(MonthlyPrice$Date)#storing dates from our data
print(dates)
newDates <- dates[13309:13549]#storing data from 2000 to 2020
print(newDates)###############################################
avgPrice <- c(MonthlyPrice$AveragePrices)#storing dates from our data
print(avgPrice)
newPriceReco <- avgPrice[13309:13549]
print(newPriceReco)
HouSold <- c(MonthlyPrice$HousesSold)
print(HouSold)
newHouSolds <- HouSold[13309:13549]
print(newHouSolds)#############################################
plot(newPriceReco, xlab = "", ylab = "Average Prices" , main = "Graphical reviews on average prices between 2000 to 2020", col="red")
PCA=prcomp(london[c("Price","Area.in.sq.ft", "No..of.Bedrooms", "No..of.Bathrooms")])
PCA
summary(PCA)
plot(PCA)
plot(PCA, type="l")
biplot(PCA)
attributes(PCA)
PCA$rotation
plot(PCA$x[,1],PCA$x[,2])
pca.var=PCA$sdev^2
pca.var.per<-round(pca.var/sum(pca.var)*100,2)
barplot(pca.var.per,main="Scree plot",xlab="principal component",ylab="percentage variation")
loadingscores<-PCA$rotation[,1]
loadingscores
plot(loadingscores)
plot(PCA, type="l")
biplot(PCA)
attributes(PCA)
PCA$rotation
plot(PCA$x[,1],PCA$x[,2])
pca.var=PCA$sdev^2
pca.var.per<-round(pca.var/sum(pca.var)*100,2)
barplot(pca.var.per,main="Scree plot",xlab="principal component",ylab="percentage variation")
housesSold <- c(MonthlyPrice$HousesSold)
View(housesSold)
datesTimeAnalysis <- c(MonthlyPrice$Date)
View(datesTimeAnalysis)
df <- data.frame(datesTimeAnalysis, housesSold)
View(df)
write_xlsx(df,"C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/df.xlsx")
dataTime <-read_excel("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/df.xlsx")
View(dataTime)
df1 <- xts(dataTime$housesSold, as.Date(df$datesTimeAnalysis, format = "%d/%m/%Y"), frequency = 1)
df2 <- ts(zoo(dataTime$housesSold, order.by=as.Date(as.character(dataTime$datesTimeAnalysis), format="%d/%m/%Y")), frequency = 4)
ts_info(df2)
ts_plot(df1,
title = "TimeSeries Analysis on London House prices",
Ytitle = "HousesSold",
Xtitle = "Number of houses sold from 1995 to 2020",
slider = TRUE)
#Decomposing time series
ts_decompose(df2)
#Seasonal Analysis
cityPriceDates <- c(MonthlyPrice$Date)#storing dates from our data
print(cityPriceDates)
newCityPriceDates <- cityPriceDates[1:301]
print(newCityPriceDates)
cityHouseSolds <- c(MonthlyPrice$HousesSold)
print(cityHouseSolds)
newCityHouseSolds <- cityHouseSolds[1:301]
print(newCityHouseSolds)
seasonalDF <- data.frame(newCityPriceDates, newCityHouseSolds)
View(seasonalDF)
write_xlsx(seasonalDF,"C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/seasonalDF.xlsx")
seasonalDF <-read_excel("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/seasonalDF.xlsx")
View(seasonalDF)
seasonalDf <- ts(zoo(seasonalDF$newCityHouseSolds, order.by=as.Date(as.character(seasonalDF$newCityPriceDates), format="%d/%m/%Y")), frequency = 4)
ts_seasonal(seasonalDf, type = "all")
ts_seasonal(df2 - decompose(df2)$trend,
type = "all",
title = "Seasonal Plot - London Houses (Detrend)")
ts_heatmap(df2)
ts_surface(df2)
#corelation analysis on Time series data
dataacf <- acf(coredata(df1))
print(dataacf)
ts_lags(df1)
ts_lags(df1, lags = c(12, 24, 36, 48))
#Forecasting series
data= seasonalDF
start(data$newCityPriceDates)
end(data$newCityPriceDates)
sum(is.na(data$newCityPriceDates))
summary(data$newCityPriceDates)
dataDf <- ts(zoo(data$newCityHouseSolds, order.by=as.Date(as.character(data$newCityPriceDates), format="%d/%m/%Y")), frequency = 4)
modelArima <- auto.arima(dataDf)
print(modelArima)
plot.ts(modelArima$residuals)
myforecast <- forecast(modelArima, level=c(95), h=10*12)
myforecast
plot(myforecast)
naive_mod <- naive(dataDf, h = 12)
summary(naive_mod)
plot(naive_mod)
se_model <- ses(dataDf, h = 12)
summary(se_model)
plot(se_model)
#Decision Tree Algorithm
london$Price <- as.factor(london$Price)
str(london)
london$No..of.Bedrooms <- as.factor(london$No..of.Bedrooms)
str(london)
set.seed(28022020)
london.train.index <- sample(1:nrow(london),ceiling(0.7*nrow(london)))
london.train <- london[london.train.index,]
london.test <- london[-london.train.index,]
rpart.Control <- rpart.control(
minsplit = 20,
xval = 10
)
fit.rpart <- rpart(
Price ~ No..of.Bedrooms,
data = london,
method='class',
control = rpart.Control
)
fit.rpart
prp(fit.rpart, faclen = 0, cex = 0.8, extra = 1)
rpart.predict <- predict(
fit.rpart,
london.test[, -2],
type = "class"
)
confusionMatrix(rpart.predict,london.test[,2])
bestcp <- fit.rpart$cptable[
which.min(fit.rpart$cptable[,"xerror"]),
"CP"
]
fit.rpart.pruned <- prune(fit.rpart, cp = bestcp)
prp(fit.rpart.pruned, faclen = 0, cex = 0.8, extra = 2)
fancyRpartPlot(fit.rpart.pruned)
rpart.predict.pruned <- predict(
fit.rpart.pruned,
london.test[, -2],
type = "class"
)
confusionMatrix(rpart.predict.pruned,london.test[,2])
library(readxl)
library(readr)
library(TSstudio)
library(zoo)
library(xts)
library(writexl)
library(stats)
library(lubridate)
library(dplyr)
library(tsibble)
library(tibbletime)
library(ggplot2)
library(forecast)
library(fpp2)
library(TTR)
library(dplyr)
library(MLmetrics)
library(quantmod)
library(e1071)
library(randomForest)
library(MASS)
library(rpart) # for recursive partitioning model
library(rpart.plot) # for plotting recursive partitioning models
library(adabag) # for bagged models
library(caret) # for confusionMatrix
library(C50) # for the C5.0 model
library(RColorBrewer) # for colour palettes
library(ROCR) # for the ROC curve
library(rattle)
library(Hmisc)
library(glmnet)
library(ggplot2)
library(tree)
library(MASS)
library(nFactors)
#Below I am setting my working directory
setwd("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1")
#Here I'm importing my prices dataset in RStudio
MonthlyPrice <- read.csv("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/MonthlyHousePrice.csv")
london <- read.csv("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/London.csv")
dublinPrices <- read.csv("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/DublinHouses.csv")
View(MonthlyPrice)#see our data in new tab
View(london)
View(dublinPrices)
print(MonthlyPrice)#printing our data in console
#Find our what value do we have at our index
MonthlyPrice[,1]#checking our index one
MonthlyPrice[,2]#checking our index two
MonthlyPrice[,3]#checking our index three
MonthlyPrice[,4]#checking our index four
MonthlyPrice[,5]#checking our index five
MonthlyPrice[,6]#checking our index six
MonthlyPrice[,7]#checking our index seven
#Checking index of our London houses data
london[,1]#checking our index one
london[,2]#checking our index two
london[,3]#checking our index three
london[,4]#checking our index four
london[,5]#checking our index five
london[,6]#checking our index six
london[,7]#checking our index seven
london[,8]#checking our index eight
london[,9]#checking our index nine
london[,10]#checking our index ten
#Checking index of our Dublin houses data
dublinPrices[,1]#checking our index one
dublinPrices[,2]#checking our index two
dublinPrices[,3]#checking our index three
dublinPrices[,4]#checking our index four
dublinPrices[,5]#checking our index five
dublinPrices[,6]#checking our index six
dublinPrices[,7]#checking our index seven
dublinPrices[,8]#checking our index eight
dublinPrices[,9]#checking our index nine
dublinPrices[,10]#checking our index ten
#Reordering dataset by their position
MonthlyPrice<-MonthlyPrice[, c(1,2,5,4,6,3,7)] #here I just reorderes my columns
View(MonthlyPrice)
#Deleting unnecessary column from London housing data
london[,1] <- NULL
london[,7] <- NULL
#Deleting unnecessary column from Dublin housing data
dublinPrices$Address <- NULL
dublinPrices$Postal.Code <- NULL
dublinPrices$Description.of.Property <- NULL
#Changing names of columns for our london house prices datasets
names(MonthlyPrice)[names(MonthlyPrice)== "date"] <- "Date"
names(MonthlyPrice)[names(MonthlyPrice)== "area"] <- "Specific area of London"
names(MonthlyPrice)[names(MonthlyPrice)== "houses_sold"] <- "HousesSold"
names(MonthlyPrice)[names(MonthlyPrice)== "code"] <- "Code"
names(MonthlyPrice)[names(MonthlyPrice)== "no_of_crimes"] <- "NumberOfCrimes"
names(MonthlyPrice)[names(MonthlyPrice)== "average_price"] <- "AveragePrices"
names(MonthlyPrice)[names(MonthlyPrice)== "borough_flag"] <- "BoroughFlag"
MonthlyPrice$HouseSold <- NULL
View(MonthlyPrice)#Take a look at our new datasets where names of our columns has been changed!
MonthlyPrice_Mean<-mean(MonthlyPrice$HousesSold, na.rm = TRUE)
MonthlyPrice$HousesSold[is.na(MonthlyPrice$HousesSold)]<-MonthlyPrice_Mean#Filling empty rows with mean of column
crimes_Mean<-mean(MonthlyPrice$NumberOfCrimes, na.rm = TRUE)
MonthlyPrice$NumberOfCrimes[is.na(MonthlyPrice$NumberOfCrimes)]<-crimes_Mean#Filling empty rows with mean of column
sapply(MonthlyPrice, function(x) sum(is.na(x)))#Check is there any more empty column
#checking null values of London Dataset
sapply(london, function(x) sum(is.na(x)))#Check is there any more empty column
sapply(dublinPrices, function(x) sum(is.na(x)))#Check is there any more empty column
#Converting Dublin houses prices from characters to numeric
numeric <- suppressWarnings(as.numeric(dublinPrices$Price))
numeric
summary(numeric)
#creating a new data frame of dublin house price with their number of bedrooms, number of house bathroom, and their prices.
houseBeds <- c(dublinPrices$Number.of.bedrooms)
View(houseBeds)
housePrice <- c(numeric)
View(housePrice)
houseBath <- c(dublinPrices$Number.of.bathrooms)
View(houseBath)
dublinDf <- data.frame(houseBeds, housePrice, houseBath)
View(dublinDf)
write_csv(dublinDf,"C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/dublinDf.csv")
#Exploratory Data Analysis
summary(MonthlyPrice)#Summary of our data (descriptive statistics)
summary(london)#Summary of our London data (descriptive statistics)
summary(dublinPrices)
str(dublinPrices)
# Create the function for checking mode.
getmode <- function(v) {
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
v <- c(MonthlyPrice$AveragePrices)
w <- c(MonthlyPrice$NumberOfCrimes)
h <- c(MonthlyPrice$HousesSold)
area <- c(MonthlyPrice$`Specific area of London`)
# Calculate the mode using the above function.
result <- getmode(v)#Mode for average prices
crimes <- getmode(w)#Mode for number of crimes
houseSolds <- getmode(h)#Mode for house sold
specificArea <- getmode(area)
print(result)#71070 is mode of average prices
print(crimes)#mode of numbers of crimes is 2158.358
print(houseSolds)#Mode of house sold is 3893.994
print(specificArea)#mode of specific area in London is (Enfield)
#BarPlot between highest and lowest prices of London houses
londonMaxPrice <- max(MonthlyPrice$AveragePrices)#1463378
londonMinPrice <- min(MonthlyPrice$AveragePrices)#40722
prices <- c(40722, 1463378)
comparison <- c("Minimum", "Maximum")
barplot(prices,names.arg=comparison,xlab="",ylab="House prices",col="light blue",
main="Highest vs Lowest prices of London houses",border="red")
dates <- c(MonthlyPrice$Date)#storing dates from our data
print(dates)
newDates <- dates[13309:13549]#storing data from 2000 to 2020
print(newDates)###############################################
avgPrice <- c(MonthlyPrice$AveragePrices)#storing dates from our data
print(avgPrice)
newPriceReco <- avgPrice[13309:13549]
print(newPriceReco)
HouSold <- c(MonthlyPrice$HousesSold)
print(HouSold)
newHouSolds <- HouSold[13309:13549]
print(newHouSolds)#############################################
plot(newPriceReco, xlab = "", ylab = "Average Prices" , main = "Graphical reviews on average prices between 2000 to 2020", col="red")
#Principal component Analysis (PCA)
PCA=prcomp(london[c("Price","Area.in.sq.ft", "No..of.Bedrooms", "No..of.Bathrooms")])
PCA
summary(PCA)
plot(PCA)
plot(PCA, type="l")
biplot(PCA)
attributes(PCA)
PCA$rotation
plot(PCA$x[,1],PCA$x[,2])
pca.var=PCA$sdev^2
pca.var.per<-round(pca.var/sum(pca.var)*100,2)
barplot(pca.var.per,main="Scree plot",xlab="principal component",ylab="percentage variation")
loadingscores<-PCA$rotation[,1]
loadingscores
plot(loadingscores)
#Creating a data frame for time series analysis
housesSold <- c(MonthlyPrice$HousesSold)
View(housesSold)
datesTimeAnalysis <- c(MonthlyPrice$Date)
View(datesTimeAnalysis)
df <- data.frame(datesTimeAnalysis, housesSold)
View(df)
write_xlsx(df,"C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/df.xlsx")
dataTime <-read_excel("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/df.xlsx")
View(dataTime)
df1 <- xts(dataTime$housesSold, as.Date(df$datesTimeAnalysis, format = "%d/%m/%Y"), frequency = 1)
df2 <- ts(zoo(dataTime$housesSold, order.by=as.Date(as.character(dataTime$datesTimeAnalysis), format="%d/%m/%Y")), frequency = 4)
ts_info(df2)
ts_plot(df1,
title = "TimeSeries Analysis on London House prices",
Ytitle = "HousesSold",
Xtitle = "Number of houses sold from 1995 to 2020",
slider = TRUE)
#Decomposing time series
ts_decompose(df2)
#Seasonal Analysis
cityPriceDates <- c(MonthlyPrice$Date)#storing dates from our data
print(cityPriceDates)
newCityPriceDates <- cityPriceDates[1:301]
print(newCityPriceDates)
cityHouseSolds <- c(MonthlyPrice$HousesSold)
print(cityHouseSolds)
newCityHouseSolds <- cityHouseSolds[1:301]
print(newCityHouseSolds)
seasonalDF <- data.frame(newCityPriceDates, newCityHouseSolds)
View(seasonalDF)
write_xlsx(seasonalDF,"C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/seasonalDF.xlsx")
seasonalDF <-read_excel("C:/Users/umeri/Videos/MSc in Data Analytics/DataMining and Machine Learning 1/DMML1/seasonalDF.xlsx")
View(seasonalDF)
seasonalDf <- ts(zoo(seasonalDF$newCityHouseSolds, order.by=as.Date(as.character(seasonalDF$newCityPriceDates), format="%d/%m/%Y")), frequency = 4)
ts_seasonal(seasonalDf, type = "all")
ts_seasonal(df2 - decompose(df2)$trend,
type = "all",
title = "Seasonal Plot - London Houses (Detrend)")
#corelation analysis on Time series data
dataacf <- acf(coredata(df1))
print(dataacf)
ts_lags(df1)
ts_lags(df1, lags = c(12, 24, 36, 48))
#Forecasting series
data= seasonalDF
start(data$newCityPriceDates)
end(data$newCityPriceDates)
sum(is.na(data$newCityPriceDates))
summary(data$newCityPriceDates)
dataDf <- ts(zoo(data$newCityHouseSolds, order.by=as.Date(as.character(data$newCityPriceDates), format="%d/%m/%Y")), frequency = 4)
modelArima <- auto.arima(dataDf)
print(modelArima)
plot.ts(modelArima$residuals)
myforecast <- forecast(modelArima, level=c(95), h=10*12)
myforecast
plot(myforecast)
naive_mod <- naive(dataDf, h = 12)
summary(naive_mod)
plot(naive_mod)
se_model <- ses(dataDf, h = 12)
summary(se_model)
plot(se_model)
